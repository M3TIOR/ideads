#!/bin/sh

#ripoff of eax extended register >> ax used for storing return values in c code.
#I'm using it to do the exact same thing here.
eax=""
workdir="/tmp/Osmium_src/disktool/"
diskdir="/tmp/Osmium_src/disktool/disks/"
bindir="/tmp/Osmium_src/disktool/binaries/"

#dd vars
blocksize="1"
blockcount="1"
readfrom="0"
writefrom="0"
target=""


_init_(){
	exec ./tmpcheck
	mkdir "/tmp/Osmium_src"
	#because another script could have generated the Osmium_src directory already.

	open=1;
	if [ -e $workdir ] && [ -d $workdir ];then
		#this is all to make sure we don't already have one of these scripts running.
		if [ -e "/tmp/Osmium_src/disktool.pid"];then
			session=$(cat "/tmp/Osmium_src/disktool.pid")
			ps cax | grep $session > /dev/null
			if [ $? != 0 ];then
				open=0;
			fi
		else
			open=0;
		fi
		if [ $open -eq 0 ];then
			#if this file isn't opened any where else, which means we didn't generate the file
			#we need to remove the temp directory and re initiate it.
			rm -rf "/tmp/Osmium_src/disktool"
			rm "/tmp/Osmium_src/disktool.pid"
		fi
	fi

	#depcheck
	if [ -e "/bin/dd" ] || [ -e "/usr/bin/dd" ];then
		echo "Running init..."
	else
		echo "The program dependency for this script 'dd' is not installed."
		echo "Please install this dependency to continue. Exiting..."
		exit
	fi

	#NOTE TO SELF: MOVE THE DEPCHECK TO THE TOP OF THE INIT!

	#and now we label the program as active.
	mkdir "/tmp/Osmium_src/disktool"
	echo $$ > "/tmp/Osmium_src/disktool.pid"
}

#for generating new disks.
new(){
	if [ $1 != "" ];then
		while [ $1 != "" ]; do
			case $1 in
				-n)target=$1;;#name
				-s)size=$1;;#size
				-h)
					#program help
					echo "Arguments:"
					echo "	-n <name>	-- New File Name."
					echo "  -s <size>	-- New File Size."
					echo "  -h 		-- Print this message."
					return 0
				;;
				*)$2="-h";;
			esac
			shift
		done
		dd if="/dev/null" bs=$size count="1" of=$target
	else
		new -h
	fi
}

#lists specified information.
list(){
	if [ $1 != "" ];then
		while [ $1 != "" ]; do
			case $1 in
				-d )dir $diskdir;return 0;;
				-b )dir $bindir;return 0;;
				-h)
					#program help
					echo "Arguments:"
					echo "  -d		-- List only disks."
					echo "  -b		-- List only binaries."
					echo "  -h		-- Print this message."
					echo "  none		-- List all files generated by this script."
					return 0
				;;
				*)$2="-h";;
			esac
			shift
		done
	else
		dir $diskdir;
		dir $bindir;
	fi
}

#for fuzing disks together...
fusion(){
	if [ $1 != "" ];then
		while [ $1 != "" ]; do
			case $1 in
				#so I\'m not sure what do do about this...

				*)$2="-h";;
			esac
			shift
		done
	else

	fi
}

#for sepperating disks...
fision(){

}

#prints and returns the size of a specified binary or disk.
sizeof(){

}

#pops up a dialogue menu for the user to add a binary in the work directory to the target disk.
add(){

}

#pops up a dialogue menu for the user to remove some bytecode of the target disk and replace it with zeros.
remove(){

}

#moves a file in the work directory to a specified directory
export(){

}

#moves a specified file into the work directory.
import(){

}

#in charge of all command calls.
commands(){

}

#eof
